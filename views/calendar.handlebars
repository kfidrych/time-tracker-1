<button id="signout-button">Sign Out</button>
<button id="addActivity" onclick="location.href='/timer'">Track a Time</button>
<button id="addEvent" onclick="location.href='/addEvent'">Add an Event</button>
<br>
<hr> {{!--
<pre id="content"></pre> --}}
<div class="responsive=-iframe-container">
    <iframe id="calendar" src="" style="border: 0" width="800" height="600" frameborder="0" scrolling="no"></iframe>
</div>

<script>

    // Client ID and API key from the Developer Console
    var CLIENT_ID = '361094340121-kkaacb25ru5kev00ganra8mslilj9jbc.apps.googleusercontent.com';
    var API_KEY = 'AIzaSyBFJdqwZ6zDkPKjjoGcw2nQHgoynb0AHzg';
    var CALENDAR_ID = "";

    // Array of API discovery doc URLs for APIs used by the quickstart
    var DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"];

    // Authorization scopes required by the API; multiple scopes can be
    // included, separated by spaces.
    var SCOPES = "https://www.googleapis.com/auth/calendar";

    var signoutButton = document.getElementById('signout-button');

    /**
     *  On load, called to load the auth2 library and API client library.
     */
    function handleClientLoad() {
        gapi.load('client:auth2', initClient);
    }

    /**
     *  Initializes the API client library and sets up sign-in state
     *  listeners.
     */
    function initClient() {
        gapi.client.init({
            apiKey: API_KEY,
            clientId: CLIENT_ID,
            discoveryDocs: DISCOVERY_DOCS,
            scope: SCOPES
        }).then(function () {
            // Listen for sign-in state changes.
            gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);

            // Handle the initial sign-in state.
            updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
            //authorizeButton.onclick = handleAuthClick;
            handleAuthClick();
            signoutButton.onclick = handleSignoutClick;
        });
    }

    /**
     *  Called when the signed in status changes, to update the UI
     *  appropriately. After a sign-in, the API is called.
     */
    function updateSigninStatus(isSignedIn) {
        if (isSignedIn) {
            signoutButton.style.display = 'block';
            console.log("signed in");
            listUpcomingEvents();
            postEvent();
            //showCalendar();
        } else {
            signoutButton.style.display = 'none';
        }
    }

    /**
     *  Sign in the user upon button click.
     */
    function handleAuthClick(event) {
        gapi.auth2.getAuthInstance().signIn();
    }

    /**
     *  Sign out the user upon button click.
     */
    function handleSignoutClick(event) {
        gapi.auth2.getAuthInstance().signOut();
    }

    /**
     * Append a pre element to the body containing the given message
     * as its text node. Used to display the results of the API call.
     *
     * @param {string} message Text to be placed in pre element.
     */
    function appendPre(message) {
        console.log(message);
        var pre = document.getElementById('content');
        var textContent = document.createTextNode(message + '\n');
        pre.appendChild(textContent);
    }

    /**
     * Print the summary and start datetime/date of the next ten events in
     * the authorized user's calendar. If no events are found an
     * appropriate message is printed.
     */
    function listUpcomingEvents() {
        console.log("upcoming....");
        gapi.client.calendar.events.list({
            'async': false,
            'calendarId': 'primary',
            'timeMin': (new Date()).toISOString(),
            'showDeleted': false,
            'singleEvents': true,
            'maxResults': 10,
            'orderBy': 'startTime'
        }).then(function (response) {
            CALENDAR_ID = response.result.summary;
            CALENDAR_URL = "https://calendar.google.com/calendar/embed?src=" + CALENDAR_ID + "&ctz=America%2FNew_York"

            $("#calendar").attr("src", CALENDAR_URL);

            //console.log(response);
            //var events = response.result.items;
            //appendPre('Upcoming events:');

            //if (events.length > 0) {
            //for (i = 0; i < events.length; i++) {
            //var event = events[i];
            //var when = event.start.dateTime;
            //if (!when) {
            //    when = event.start.date;
            //}
            //appendPre(event.summary + ' (' + when + ')')
            //}
            //} else {
            //    appendPre('No upcoming events found.');
            //}
        });
    }

    var resource = {
        "summary": "Candy Store",
        "location": "Somewhere",
        "start": {
            "dateTime": "2018-05-23T10:00:00.000-07:00"
        },
        "end": {
            "dateTime": "2018-05-23T10:25:00.000-07:00"
        }
    };

    function postEvent() {
        var request = gapi.client.calendar.events.insert({
            'calendarId': 'primary',
            'resource': resource
        });
        request.execute(function (resp) {
            console.log(resp);
        });
    };

</script>

<script async defer src="https://apis.google.com/js/api.js" onload="this.onload=function(){};handleClientLoad()" onreadystatechange="if (this.readyState === 'complete') this.onload()"></script>